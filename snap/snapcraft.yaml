name: node-red-rpi
adopt-info: node-red
summary: Low-code programming for event-driven applications
description: 
  Node-RED is a flow based programming application for wiring together
  hardware devices, APIs and online services in new and interesting ways.
  For more information see http://nodered.org

  This snap is based on https://snapcraft.io/node-red but has additional
  Raspberry Pi specific node modules, i2c support and ships the
  node dashboard module for displaying data.
confinement: strict
grade: stable
base: core18

# Limit architectures to Pi specifc arches
architectures:
  - build-on: armhf
  - build-on: arm64

apps:
  node-red:
    command: bin/startNR
    daemon: simple
    restart-condition: on-failure
    plugs:
      - audio-playback
      - bluez
      - bluetooth-control
      - camera
      - gpio
      - home
      - i2c
      - network-bind
      - network
      - network-observe
      - pulseaudio
      - removable-media
      - serial-port
  npm:
    command: bin/npm
    plugs:
      - home
      - network
  desktop-launch:
    command: bin/desktop-launch
    plugs:
      - desktop

parts:
  node: # We dump in a specific version of node/npm from upstream.
    plugin: dump
    source:
      - on amd64: https://nodejs.org/dist/v10.20.1/node-v10.20.1-linux-x64.tar.gz
      - on armhf: https://nodejs.org/dist/v10.20.1/node-v10.20.1-linux-armv7l.tar.gz
      - on arm64: https://nodejs.org/dist/v10.20.1/node-v10.20.1-linux-arm64.tar.gz
      - on s390x: https://nodejs.org/dist/v10.20.1/node-v10.20.1-linux-s390x.tar.gz
      - on i386: https://nodejs.org/dist/v8.17.0/node-v8.17.0-linux-x86.tar.gz
  node-red:
    after: [node]
    plugin: nil # We use the nil plugin so we can fully override the build with whatever we need to do
    source: .
    stage-packages:
      - python
    build-packages:
      - libatomic1
    override-build: | # Whatever steps needed to install node-red into the install folder, which gets incorporated into the snap
      PATH=$PATH:../npm/bin
      npm config set unsafe-perm True
      # npm install --prefix $SNAPCRAFT_PART_INSTALL/lib
      DEFAULT_MODULES="node-red node-red-node-ping node-red-node-random node-red-node-rbe node-red-node-serialport"
      if [ "$SNAPCRAFT_ARCH_TRIPLET" = "arm-linux-gnueabihf" ] || \
           [ "$SNAPCRAFT_ARCH_TRIPLET" = "aarch64-linux-gnu" ]; then
        # Add raspeberry pi and beaglebone modules
        echo "adding node modules for $SNAPCRAFT_ARCH_TRIPLET"
        DEFAULT_MODULES="$DEFAULT_MODULES node-red-node-pi-gpio node-red-contrib-play-audio node-red-node-smooth node-red-contrib-gpio node-red-contrib-i2c node-red-dashboardi node-red-contrib-bme280-rpi"
      fi
      npm install --prefix $SNAPCRAFT_PART_INSTALL/lib $DEFAULT_MODULES
      find $SNAPCRAFT_PART_INSTALL -type f -name '*.js.swp' -delete
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name test -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name doc -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name example* -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name sample -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname benchmark* -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname .nyc_output -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname unpacked -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name man* -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name tst -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname demo -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name bench.gnu -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .npmignore -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .travis.yml -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .jshintrc -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname README.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname HISTORY.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname CONTRIBUTING.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname CHANGE*.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitmodules -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitattributes -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitignore -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname "*~" -exec rm -f {} \;
      VER=$(npm show node-red version)
      echo "VERSION $(npm show node-red version)"
      snapcraftctl set-version $VER
  settings:
    plugin: dump
    source: snap/local/settings # snapcraft now prefers local parts to be in snap/local
    organize:
      start.sh: "bin/startNR"
      desktop-launch: "bin/desktop-launch"
