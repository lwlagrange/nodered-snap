name: node-red-rpi
adopt-info: node-red
summary: Low-code programming for event-driven applications
description: 
  Node-RED is a flow based programming application for wiring together
  hardware devices, APIs and online services in new and interesting ways.
  For more information see http://nodered.org

  This snap is based on https://snapcraft.io/node-red but has additional
  Raspberry Pi specific node modules, i2c support and ships the
  node dashboard module for displaying data.
confinement: strict
grade: stable
base: core18

# Limit architectures to Pi specifc arches
architectures:
  - build-on: armhf
  - build-on: arm64

apps:
  node-red:
    command: bin/startNR
    daemon: simple
    restart-condition: on-failure
    plugs:
      - audio-playback
      - bluez
      - bluetooth-control
      - camera
      - gpio
      - gpio-memory-control
      - hardware-observe
      - home
      - i2c
      - iio
      - login-session-observe
      - mount-observe
      - network-bind
      - network
      - network-observe
      - physical-memory-control
      - pulseaudio
      - removable-media
      - serial-port
      - shutdown
      - spi
      - system-observe
  npm:
    command: bin/npm
    plugs:
      - home
      - network
  desktop-launch:
    command: bin/desktop-launch
    plugs:
      - desktop

layout:
  /usr/bin/python:
    symlink: $SNAP/usr/bin/python
  /usr/share/doc/python-rpi.gpio: # extremely silly hack, since node-red hardcodes either of two dirs
    symlink: $SNAP/usr/share/doc/python # (this is one of them) to determine if RPi.GPIO is installed
  /usr/bin/free:
    bind-file: $SNAP/usr/bin/free
  /usr/bin/top:
    bind-file: $SNAP/usr/bin/top

parts:
  sensor-libs:
    plugin: python
    python-version: python2
    python-packages:
      - RPi.GPIO
      - RPi.bme280
      - Adafruit_Python_DHT
      - adafruit-mcp3008
      - mcp3008
      - picamera
      - unicornhat
    build-packages:
      - libssl-dev
      - libffi-dev
      - python-dev
      - python-pil
      - python-smbus
    build-environment:
      - READTHEDOCS: 'True'
    stage-packages:
      - i2c-tools
      - libffi6
      - libssl1.0.0
      - procps
      - python-minimal
      - python-pil
      - python-smbus
    override-pull: |
      snapcraftctl pull
      # hack to make adafruit dht lib always buidl for pi(2/3/4)
      tar xf ../python-packages/Adafruit_Python_DHT-1.4.0.tar.gz
      plat_detect="Adafruit_Python_DHT-1.4.0/Adafruit_DHT/platform_detect.py"
      sed -i '/^.*# Handle R.*/a \    return RASPBERRY_PI' $plat_detect
      sed -i '/^.*# Revision list.*/a \    return 2' $plat_detect
      sed -i '/^.*# Anything else.*/a \    return 3' $plat_detect
      tar czf ../python-packages/Adafruit_Python_DHT-1.4.0.tar.gz Adafruit_Python_DHT-1.4.0
      rm -rf Adafruit_Python_DHT-1.4.0
  node-red:
    plugin: nodejs
    nodejs-version: 10.20.1
    nodejs-package-manager: npm
    source: .
    after: [ sensor-libs ]
    stage-packages:
      - bluetooth
      - bluez
      - libbluetooth3
      - python
    build-packages:
      - libatomic1
      - libbluetooth-dev
      - libudev-dev
    override-build: | # Whatever steps needed to install node-red into the install folder, which gets incorporated into the snap
      PATH=$PATH:$SNAPCRAFT_PART_SRC/../npm/bin
      npm config set unsafe-perm True

      # set default modules
      DEFAULT_MODULES="npm node-red node-red-node-ping node-red-node-random node-red-node-rbe \
                       node-red-node-serialport node-red-node-pi-gpio node-red-contrib-play-audio \
                       node-red-node-smooth node-red-contrib-i2c node-red-dashboard \
                       node-red-contrib-bme280-rpi node-dht-sensor node-red-contrib-dht-sensor \
                       node-red-contrib-ds18b20-sensor node-red-node-pi-mcp3008 node-red-contrib-bme280 \
                       node-red-contrib-sunevents node-red-node-pisrf node-red-contrib-easybotics-air-quality \
                       node-red-contrib-camerapi node-red-node-pi-neopixel node-red-contrib-sds011 \
                       node-red-contrib-noble node-red-contrib-generic-ble node-red-contrib-oled"

      # install
      npm install --prefix $SNAPCRAFT_PART_INSTALL/lib $DEFAULT_MODULES

      # clean up unused cruft
      echo "cleaning up"
      find $SNAPCRAFT_PART_INSTALL -type f -name '*.js.swp' -delete
      for dir in test doc example* tst man* sample; do
        find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name $dir -prune -exec rm -rf {} \;
      done
      for dir in benchmark* .nyc_output unpacked demo; do
        find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname $dir -prune -exec rm -rf {} \;
      done
      for file in bench.gnu .npmignore .travis.yml .jshintrc; do
        find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name $file -exec rm -f {} \;
      done
      for file in README.md HISTORY.md CONTRIBUTING.md CHANGE*.md .gitmodules .gitattributes .gitignore; do
        find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname $file -exec rm -f {} \;
      done
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname "*~" -exec rm -f {} \;

      # set version
      VER=$(npm show node-red version)
      echo "VERSION $VER"
      snapcraftctl set-version $VER

      # copy node
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      cp -av $SNAPCRAFT_PART_SRC/../npm/bin/node $SNAPCRAFT_PART_INSTALL/bin/
  settings:
    plugin: dump
    source: snap/local/settings # snapcraft now prefers local parts to be in snap/local
    organize:
      start.sh: "bin/startNR"
      desktop-launch: "bin/desktop-launch"
